package main

import (
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

var db *gorm.DB

type Order struct {
	ID          uint           `gorm:"primaryKey" json:"id"`
	CustomerName string       `json:"customerName"`
	OrderedAt   time.Time      `json:"orderedAt"`
	Items       []Item        `gorm:"foreignKey:OrderID" json:"items"`
}

type Item struct {
	ID          uint   `gorm:"primaryKey" json:"id"`
	Code        string `json:"itemCode"`
	Description string `json:"description"`
	Quantity    int64  `json:"quantity"`
	OrderID     uint   `json:"-"`
}

// database
func initDB() {
	var err error
	dsn := "user=herisa password=1234 dbname=order sslmode=disable"
	db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatal(err)
	}

	db.AutoMigrate(&Order{}, &Item{})
}

// controller membuat order
func createOrder(c *gin.Context) {
	var request struct {
		OrderedAt    time.Time `json:"orderedAt"`
		CustomerName string    `json:"customerName"`
		Items        []Item    `json:"items"`
	}

	if err := c.ShouldBindJSON(&request); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	order := Order{
		OrderedAt:   request.OrderedAt,
		CustomerName: request.CustomerName,
		Items:       request.Items,
	}

	db.Create(&order)
	c.JSON(http.StatusCreated, order)
}

// controller lihat order
func getOrders(c *gin.Context) {
	var orders []Order
	db.Preload("Items").Find(&orders)
	c.JSON(http.StatusOK, orders)
}

// mengubah order
func updateOrder(c *gin.Context) {
	id := c.Param("id")

	var request struct {
		OrderedAt    time.Time `json:"orderedAt"`
		CustomerName string    `json:"customerName"`
		Items        []Item    `json:"items"`
	}

	if err := c.ShouldBindJSON(&request); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	var order Order
	if err := db.Preload("Items").First(&order, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Order not found"})
		return
	}

	order.OrderedAt = request.OrderedAt
	order.CustomerName = request.CustomerName
	order.Items = request.Items

	db.Save(&order)
	c.JSON(http.StatusOK, order)
}

// menghapus order
func deleteOrder(c *gin.Context) {
	id := c.Param("id")

	var order Order
	if err := db.First(&order, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Order not found"})
		return
	}

	db.Delete(&order)
	c.JSON(http.StatusOK, gin.H{"message": "Success delete"})
}

func main() {
	initDB()

	r := gin.Default()

	r.POST("/orders", createOrder)
	r.GET("/orders", getOrders)
	r.PUT("/orders/:id", updateOrder)
	r.DELETE("/orders/:id", deleteOrder)

	port := 8080
	addr := fmt.Sprintf(":%d", port)
	log.Printf("Server is running on %s...\n", addr)
	if err := r.Run(addr); err != nil {
		log.Fatal(err)
	}
}
